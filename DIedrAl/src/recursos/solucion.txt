Programación con restricciones - práctica 8

#Nombre1: Guillermo Aguilar 
#Nombre2: Daniel Pascual

#Observaciones:

#P1 :
include "alldifferent.mzn";

int: n = 3;
int: ncuad = n * n;
array[1..n,1..n] of var 1..ncuad: cuadrado;
array[1..ncuad] of var 1..ncuad: lista;


constraint lista = array1d(cuadrado);
constraint alldifferent(lista);
int: total =  (n * (n*n +1)) div 2;


constraint forall (i in 1..n)((sum(j in 1..n)(cuadrado[i,j])) = total);
constraint forall (i in 1..n)((sum(j in 1..n)(cuadrado[j,i])) = total);

constraint sum(i in 1..n)(cuadrado[i,i]) = total; 
constraint sum(i in 1..n)(cuadrado[i,n-i+1]) = total; 


solve satisfy; 

output 
[
  if (j = 1 /\ i = 1) then "\n| " elseif j = 1 then "   |\n| "  else " " endif ++
    show_int(3,cuadrado[i,j])
  | i in 1..n, j in 1..n

]++ ["   |\n\n"];


#P2 :
include "alldifferent.mzn";

int: n = 3;
int: ncuad = n * n;
array[1..n,1..n] of var 1..pow(n,6): cuadrado;
array[1..ncuad] of var 1..pow(n,6): lista;


constraint lista = array1d(cuadrado);
constraint alldifferent(lista);
var int: total;


constraint forall (i in 1..n)((product(j in 1..n)(cuadrado[i,j])) = total);
constraint forall (i in 1..n)((product(j in 1..n)(cuadrado[j,i])) = total);

constraint product(i in 1..n)(cuadrado[i,i]) = total; 
constraint product(i in 1..n)(cuadrado[i,n-i+1]) = total; 


solve satisfy; 

output 
[
  if (j = 1 /\ i = 1) then "\n| " elseif j = 1 then "   |\n| "  else " " endif ++
    show_int(3,cuadrado[i,j])
  | i in 1..n, j in 1..n

]++ ["   |\n\n"];

